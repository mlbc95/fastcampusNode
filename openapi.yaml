# Base info declaration
swagger: "2.0"

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: fast-campus-server-dev.herokuapp.com
basePath: /
components:
  schemas:
    Section:
      type: object
      properties:
        crnNumber:
          type: string
        sectionNumber:
          type: string
        name:
          type: string
        professor:
          type: string
    Course:
      type: object
      properties:
        subject:
          type: string
        number:
          type: string
        name:
          type: string
        sections:
          type: array
          items:
            $ref: "#/components/schemas/Section"
    Teacher:
      type: object
      properties:
        fName:
          type: string
        lName:
          type: string
        username:
          type: string
        email:
          type: string
        school: 
          type: string
        pNmber: 
          type: string
        passwordResetToken:
          type: string
        passwordResetExpires:
          type: date
        status:
          type: string
        courses:
          type: array
          items:
          properties:
              number: 
                type: string
              name: 
                type: string,
              crnNumber: 
                type: number
              section: 
                type: string
              startTime: 
                type: number
              endTime: 
                type: number,
              professor:
                type: array
                properties:
                  name:
                    type: string
        officeHours:
          $ref: "#/components/schemas/OfficeHours"
    OfficeHours:
      type: array
      properties:
        day:
          type: string
        hours:
          type: array
          properties:
            time: 
              type: string
        office:
          type: object
          properties:
            building: 
              type: string
            roomNumber:
              type: string
    Student:
      type: object
      properties:
        fName:
          type: string
        lName:
          type: string
        username:
          type: string
        email:
          type: string
        school: 
          type: string
        pNmber: 
          type: string
        passwordResetToken:
          type: string
        passwordResetExpires:
          type: date
        degrees:
         type: array
         items:
          properties:
            level:
              type: string
            name:
              type: string
        courses:
          type: array
          items:
          properties:
              number: 
                type: string
              name: 
                type: string,
              crnNumber: 
                type: number
              section: 
                type: string
              startTime: 
                type: number
              endTime: 
                type: number,
              professor:
                type: array
                properties:
                  name:
                    type: string
  parameters:
    PostTeacher:
        type: object
        properties:
          fName:
            type: string
          lName:
            type: string
          username:
            type: string
          email:
            type: string
          school: 
            type: string
          pNmber: 
            type: string
          courses:
            type: array
            items:
              properties:
                number: 
                  type: string
                name:
                  type: string
          available:
            $ref: "#/components/schemas/Available"
    PatchTeacher:
      type: object
      properties:
        id:
          type: string
        fName:
          type: string
        lName:
          type: string
        username:
          type: string
        email:
          type: string
        school: 
          type: string
        pNmber: 
          type: string
        passwordResetToken:
          type: string
        passwordResetExpires:
          type: date
        courses:
          type: array
          items:
            properties:
              number: 
                type: string
              name:
                type: string
        available:
          $ref: "#/components/schemas/Available"
      required:
        - id
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    User:
      type: object
      properties:
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        pNumber:
          type: string
        school:
          type: string
      required:
        - username
        - email
        - password
        - school
    PatchStudent:
      type: object
      properties:
        id:
          type: string
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        pNumber:
          type: string
        school:
          type: string
        degrees:
          type: array
          $ref: "#/components/schemas/Degrees"
        courses:
          $ref: "#/components/schemas/Courses"
      required:
        - id
  responses:
    PatchStudent:
      type: object
      properties:
        id:
          type: string
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        pNumber:
          type: string
        school:
          type: string
        degrees:
          type: array
          $ref: "#/components/schemas/Degrees"
        courses:
          $ref: "#/components/schemas/Courses"
    Teacher:
      type: object
      properties:
        id:
          type: string
        fName:
          type: string
        lName:
          type: string
        username:
          type: string
        email:
          type: string
        school: 
          type: string
        pNmber: 
          type: string
        passwordResetToken:
          type: string
        passwordResetExpires:
          type: date
        courses:
          type: array
          items:
            properties:
              number: 
                type: string
              name:
                type: string
        available:
          $ref: "#/components/schemas/Available"
    ValidationError:
      type: array
      items: 
        properties:
          msg:
            type: string
          param:
            type: string
          value: 
            type: string
    User:
      type: object
      properties:
        _id:
          type: string
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        pNumber:
          type: string
        school:
          type: string
        id:
          type: string

paths:
  /auth/signup:
    post:
      summary: Signs up a new user
      description: This is the route to post all new users.  The url should contain the type of user being added while the body contains the content to be added.
      produces:
        - application/json
      parameters:
      - in: req.body
        name: user
        description: JSON of the user to be added
        required: true
        schema:
          $ref: "#/components/parameters/User"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/parameters/User"
      responses:
        201:
          description: The user was created successfully.  Depending on the type of user that was submited it will return the approrite type of object.  The schema provided below is a somewhat generic object that represents the bare minimum for the response.
          schema:
              $ref: "#/components/responses/User"
        400:
          description: The data did not pass validation, returns array with failing items along with message and value.  This error also occurs when we try to add a user and the username already exists.
          schema:
            type: array
            $ref: "#/components/responses/ValidationError"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
  /auth/login:
    post:
      summary: This is used to login
      description: This is the route that is used to login to the application.  Every user, regardless of type, should pass through this same login screen.
      produces:
        - application/json
      parameters:
      - in: req.body
        name: username/password
        description: JSON of the user to be logged in
        required: true
        schema:
          $ref: "#/components/parameters/Login"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/parameters/User"
      responses:
        200:
          description: The data sent has resulted in a successful login. The schema shown in the response is of the generic user object.  Depending on the type of user it will respond with the approriate type of user.
          schema:
            $ref: "#/components/responses/User"
        401:
          description: The data did not pass validation, returns array with failing items along with message and value.  The headers that get set are according to RFC 7235.
          schema:
            type: array
            $ref: "#/components/responses/ValidationError"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
  /students:
    get:
      summary: Get students from the db
      description: This method is used to query the db using mongo-querystring
      produces:
        - application/json
      parameters:
      - in: req.query
        name: Updated Student
        description: query string to get the desired student
        required: true
      responses:
        200:
          description: successful query, returns an array of student
          schema:
            $ref: "#/components/schemas/Student"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
    patch:
      summary: This is used to update the student
      description: This method is used to update a particular student by id.  It expects the id and fields that need updated in the body. The degree should be an array of the type degree that is shown in the JSON here.
      produces:
        - application/json
      parameters:
      - in: req.body
        name: Updated Student
        description: JSON of the student to update
        required: true
        schema:
          $ref: "#/components/schemas/Student"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        200:
          description: The user has been updated.  Updated student is sent back
          schema:
            type: object
            $ref: "#/components/schemas/Student"
        400:
          description: The data did not pass validation, returns array with failing items along with message and value.  This error also occurs when we try to add a user and the username already exists.
          schema:
            type: array
            $ref: "#/components/responses/ValidationError"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
    delete:
      summary: Used to delete the student
      description: This method is used to delete the student object fromt the db.  This is not reverisble.
      responses:
        200:
          description: The student has been successfully deleted
          schema:
            type: object
            properties:
              msg: 
                type: string
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
  /teachers:
    get:
      summary: Get teacherss from the db
      description: This method is used to query the db using mongo-querystring
      produces:
        - application/json
      parameters:
      - in: req.query
        name: Updated Student
        description: query string to get the desired teacherss
        required: true
      responses:
        200:
          description: successful query, returns an array of teacherss 
          schema:
            $ref: "#/components/schemas/Teacher"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
    patch:
      summary: This is used to update the Teacher
      description: This method is used to update a particular Teacher by id.  It expects the id and fields that need updated in the body.
      produces:
        - application/json
      parameters:
        - in: req.body
          name: Teacher to update and updated info
          required: true
          schema:
            $ref: "#/components/schemas/Teacher"
      responses:
        200:
          description: The user has been updated.
          schema:
            $ref: "#/components/schemas/Teacher"
        400:
          description: The data did not pass validation, returns array with failing items along with message and value.  This error also occurs when we try to add a user and the username already exists.
          schema:
            $ref: "#/components/responses/ValidationError"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
    delete:
      summary: Used to delete the Teacher
      description: This method is used to delete the Teacher object fromt the db.  This is not reverisble.
      produces:
        - application/json
      parameters:
        - in: req.body
          name: teacher.id
          required: true
          schema:
            type: object
            propreties:
              id:
                type: string
      responses:
        200:
          description: The teacher has been successfully deleted
          schema:
            type: object
            properties:
              msg: 
                type: string
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
  /courses:
    get:
      summary: Get courses from the db
      description: This method is used to query the db
      produces:
        - application/json
      parameters:
      - in: req.query
        name: query string
        description: query string to get the desired courses
        required: true
      responses:
        200:
          description: successful query, returns an array of courses 
          schema:
            $ref: "#/components/schemas/Course"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
    post:
      summary: Add course to db
      description: This method is used to add a course to the db.
      produces:
        - application/json
      parameters:
        - in: req.body
          name: new teacher
          description: the new teacher object to be added to the db
          required: true
          schema:
            $ref: "#/components/schemas/Course"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        201:
          description: The teacher was created successfully. 
          schema:
            $ref: "#/components/schemas/Course"
        400:
          description: The data did not pass validation, returns array with failing items along with message and value.  This error also occurs when we try to add a user and the username already exists.
          schema:
            $ref: "#/components/responses/ValidationError"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
    patch:
      summary: This is used to update the course
      description: This method is used to update a particular course by id.  It expects the id and fields that need updated in the body.
      produces:
        - application/json
      parameters:
        - in: req.body
          name: Course to update and updated info
          
          required: true
          schema:
            $ref: "#/components/schemas/Course"
      responses:
        200:
          description: The course has been updated.
          schema:
            $ref: "#/components/schemas/Course"
        400:
          description: The data did not pass validation, returns array with failing items along with message and value.  This error also occurs when we try to add a user and the username already exists.
          schema:
            $ref: "#/components/responses/ValidationError"
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err
    delete:
      summary: Used to delete the course
      description: This method is used to delete the course object fromt the db.  This is not reverisble.
      produces:
        - application/json
      parameters:
        - in: req.body
          name: teacher.id
          required: true
          schema:
            type: object
            propreties:
              id:
                type: string
      responses:
        200:
          description: The teacher has been successfully deleted
          schema:
            type: object
            properties:
              msg: 
                type: string
        500:
          description: The server encountered a general error while processing the request.  It will return an object err containint the errors. Because this is a catch all it is hard to define a schema for it.
          schema:
            type: array
            properties:
              err: err